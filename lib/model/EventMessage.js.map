{"version":3,"file":"EventMessage.js","sourceRoot":"","sources":["../../src/model/EventMessage.ts"],"names":[],"mappings":"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","sourcesContent":["/*****\n License\n --------------\n Copyright © 2017 Bill & Melinda Gates Foundation\n The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the \"License\") and you may not use these files except in compliance with the License. You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n Contributors\n --------------\n This is the official list of the Mojaloop project contributors for this file.\n Names of the original copyright holders (individuals or organizations)\n should be listed with a '*' in the first column. People who have\n contributed from an organization can be listed under the organization\n that actually holds the copyright for their contributions (see the\n Gates Foundation organization for an example). Those individuals should have\n their names indented and be marked with a '-'. Email address can be added\n optionally within square brackets <email>.\n * Gates Foundation\n - Name Surname <name.surname@gatesfoundation.com>\n\n - Ramiro González Maciel <ramiro@modusbox.com>\n - Valentin Genev <valentin.genev@modusbox.com>\n\n --------------\n ******/\n\n'use strict'\n\nimport { finished } from \"stream\";\nimport { TraceSpan, ObjectWithKeys } from \"../EventLogger\";\n\nconst crypto = require('crypto')\nconst Uuid = require('uuid4')\n\nconst TRACE_ID_REGEX = /^[0-9abcdef]{32}$/;\nconst SPAN_ID_REGEX = /^[0-9abcdef]{16}$/\n/**\n * EventType represents the different types of events.\n * This enum should not be used directly; see `EventTypeAction` below.\n */\nenum EventType {\n  undefined = \"undefined\",\n  log = \"log\",\n  audit = \"audit\",\n  error = \"error\",\n  trace = \"trace\",\n}\n\ntype EventAction = AuditEventAction | ErrorEventAction | LogEventAction | TraceEventAction | NullEventAction\n\nenum LogEventAction {\n  info = \"info\",\n  debug = \"debug\",\n  verbose = \"verbose\",\n  perf = \"perf\",\n}\n\nenum AuditEventAction {\n  default = \"default\"\n}\n\nenum ErrorEventAction {\n  internal = \"internal\",\n  external = \"external\"\n}\n\nenum TraceEventAction {\n  span = \"span\"\n}\n\nenum NullEventAction {\n  undefined = \"undefined\",\n}\n\n/**\n * This `EventTypeAction` hierarchy models the restrictions between types and actions.\n * Each `EventType` can only have a specific set of `EventAction`s\n * Each concrete subclass defines the EventType as the static readonly prop `type`,\n * and the `action` property is restricted to the specific enum type.\n * `EventTypeAction` is not exported, clients need to use the concrete subclasses.\n */\n\n\nenum EventStatusType {\n  success = \"success\",\n  failed = \"failed\"\n}\n\n// my code\n\ntype TAction = {\n  action: EventAction\n}\n\ninterface ITypeAction {\n  type: EventType,\n  action: EventAction\n}\n\nclass TypeAction implements ITypeAction {\n  readonly type: EventType\n  readonly action: EventAction\n  getType() {\n    return this.type\n  }\n  getAction() {\n    return this.action\n  }\n  constructor(typeAction: ITypeAction) {\n    this.type = typeAction.type\n    this.action = typeAction.action\n  }\n}\n\nclass LogEventTypeAction extends TypeAction {\n  static readonly type: EventType = EventType.log\n  static getType() {\n    return LogEventTypeAction.type\n  }\n  constructor(actionParam: TAction | LogEventAction | NullEventAction = NullEventAction.undefined) {\n    if (typeof actionParam === 'object' && 'action' in actionParam)\n      super({ type: LogEventTypeAction.type, action: actionParam.action })\n    else\n      super({ type: LogEventTypeAction.type, action: actionParam })\n  }\n}\n\nclass AuditEventTypeAction extends TypeAction {\n  static readonly type: EventType = EventType.audit\n  static getType() {\n    return AuditEventTypeAction.type\n  }\n  constructor(actionParam: TAction | AuditEventAction | NullEventAction = NullEventAction.undefined) {\n    if (typeof actionParam === 'object' && 'action' in actionParam)\n      super({ type: AuditEventTypeAction.type, action: actionParam.action })\n    else\n      super({ type: AuditEventTypeAction.type, action: actionParam })\n  }\n}\n\nclass ErrorEventTypeAction extends TypeAction {\n  static readonly type: EventType = EventType.error\n  static getType() {\n    return ErrorEventTypeAction.type\n  }\n  constructor(actionParam: TAction | ErrorEventAction | NullEventAction = NullEventAction.undefined) {\n    if (typeof actionParam === 'object' && 'action' in actionParam)\n      super({ type: ErrorEventTypeAction.type, action: actionParam.action })\n    else\n      super({ type: ErrorEventTypeAction.type, action: actionParam })\n  }\n}\n\nclass TraceEventTypeAction extends TypeAction {\n  static readonly type: EventType = EventType.trace\n  static getType() {\n    return TraceEventTypeAction.type\n  }\n  constructor(actionParam: TAction | TraceEventAction | NullEventAction = NullEventAction.undefined) {\n    if (typeof actionParam === 'object' && 'action' in actionParam)\n      super({ type: TraceEventTypeAction.type, action: actionParam.action })\n    else\n      super({ type: TraceEventTypeAction.type, action: actionParam })\n  }\n}\n\ninterface IEventTrace {\n  service: string,\n  traceId: string,\n  spanId?: string,\n  parentSpanId?:\tstring,\n  sampled?:\tnumber,\n  flags?:\tnumber,\n  startTimestamp?: string | Date,\n  finishTimestamp?: string,\n  tags?: { [ key: string ]: any },\n}\n\nclass EventTraceMetadata implements IEventTrace {\n  service: string\n  traceId:\tstring\n  spanId?: string\n  parentSpanId?:\tstring\n  sampled?:\tnumber\n  flags?:\tnumber\n  startTimestamp?: string = (new Date()).toISOString() // ISO 8601\n  finishTimestamp?: string\n  tags?: { [ key: string ]: any }\n\n  constructor (traceContext: Partial<IEventTrace>) {\n    let { service = '', traceId = newTraceId(), spanId = newSpanId(), parentSpanId, sampled, flags, startTimestamp, tags = {}, finishTimestamp} = traceContext\n    this.service = service\n    if (!(TRACE_ID_REGEX.test(traceId))) {\n      throw new Error(`Invalid traceId: ${traceId}`)\n    }\n    this.traceId = traceId\n    if (!(SPAN_ID_REGEX.test(spanId))) {\n      throw new Error(`Invalid spanId: ${spanId}`)\n    }\n    this.spanId = spanId\n    if (parentSpanId && !(SPAN_ID_REGEX.test(parentSpanId))) {\n      throw new Error(`Invalid parentSpanId: ${parentSpanId}`)\n    }\n    this.parentSpanId = parentSpanId\n    this.sampled = sampled\n    this.flags = flags\n    this.tags = tags\n    if ( startTimestamp instanceof Date ) {\n      this.startTimestamp = startTimestamp.toISOString() // ISO 8601\n    } else if ( startTimestamp ) {\n      this.startTimestamp = startTimestamp\n    }\n    this.finishTimestamp = finishTimestamp\n    return this\n  }\n\n  static create(service: string): EventTraceMetadata {\n    return new EventTraceMetadata({ service })    \n  }\n\n  static getContext (traceContext: IEventTrace): IEventTrace {\n    let { service, traceId, spanId, parentSpanId, sampled, flags, startTimestamp, finishTimestamp, tags } = traceContext\n    return { service, traceId, spanId, parentSpanId, sampled, flags, startTimestamp, finishTimestamp, tags }\n  }\n}\n\ninterface IEventStateMetadata {\n  status: EventStatusType\n  code?: number\n  description?: string\n}\n\nclass EventStateMetadata implements IEventStateMetadata {\n  status: EventStatusType = EventStatusType.success\n  code?: number\n  description?: string \n\n  constructor(status: EventStatusType, code?: number, description?: string) {\n    this.status = status\n    this.code = code\n    this.description = description\n    return this\n  }\n\n  static success( code?: number, description?: string): IEventStateMetadata {\n    return new EventStateMetadata(EventStatusType.success, code, description)\n  }\n\n  static failed( code?: number, description?: string): IEventStateMetadata {\n    return new EventStateMetadata(EventStatusType.failed, code, description)\n  }\n}\n\ninterface IEventMetadata {\n  id?: string,\n  type?: EventType,\n  action: EventAction,\n  createdAt?: string | Date,\n  state: IEventStateMetadata,\n  responseTo?: string\n}\n\nclass EventMetadata implements IEventMetadata {\n  id: string = Uuid()\n  readonly type: EventType = EventType.undefined\n  readonly action: EventAction = NullEventAction.undefined\n  createdAt: string // ISO 8601\n  state: IEventStateMetadata\n  responseTo?: string\n\n  // static create(eventMetadata: IEventMetadata) : IEventMetadata {\n  //     return new EventMetadata(eventMetadata)\n  // }\n\n  static log(eventMetadata: IEventMetadata) : IEventMetadata {\n    let typeAction = new LogEventTypeAction({action: eventMetadata.action});\n    return new EventMetadata(Object.assign(eventMetadata, typeAction));\n  }\n\n  static trace(eventMetadata: IEventMetadata) : IEventMetadata {\n    let typeAction = new TraceEventTypeAction({action: eventMetadata.action});\n    return new EventMetadata(Object.assign(eventMetadata, typeAction));\n  }\n\n  static audit(eventMetadata: IEventMetadata) : IEventMetadata {\n    let typeAction = new AuditEventTypeAction({action: eventMetadata.action});\n    let a = (Object.assign(eventMetadata, typeAction))\n    return new EventMetadata(a);\n  }\n\n  static error(eventMetadata: IEventMetadata ) : IEventMetadata {\n    let typeAction = new ErrorEventTypeAction({action: eventMetadata.action});\n    return new EventMetadata(Object.assign(eventMetadata, typeAction));\n  }\n\n  constructor (eventMetadata: IEventMetadata) {\n    let { createdAt = new Date().toISOString(), state, ...restParams } = eventMetadata\n    if ( createdAt instanceof Date ) {\n      this.createdAt = createdAt.toISOString() // ISO 8601\n    } else {\n      this.createdAt = createdAt\n    }\n    this.state = state\n    Object.assign(this, restParams)\n  }\n}\n\ninterface IMessageMetadata {\n  event: IEventMetadata,\n  trace: IEventTrace\n}\n\ninterface IEventMessage {\n  type: string\n  content: any\n  id?: string\n  from?: string\n  to?: string\n  pp?: string\n  metadata?: IMessageMetadata\n}\n\nclass EventMessage implements IEventMessage {\n  type: string = ''\n  content: any\n  id: string = Uuid()\n  from?: string\n  to?: string\n  pp?: string\n  metadata?: IMessageMetadata\n\n  constructor (eventMessageContent: IEventMessage) {\n      return Object.assign(this, eventMessageContent)\n    }\n}\n\nenum LogResponseStatus {\n  UNDEFINED = 'undefined',\n  pending = 'pending',\n  accepted = 'accepted',\n  error = 'error'\n}\n\nclass LogResponse {\n  status : LogResponseStatus = LogResponseStatus.UNDEFINED\n\n  constructor ( status: LogResponseStatus ) {\n    this.status = status\n  }\n}\n\nfunction newTraceId() {\n  return crypto.randomBytes(16).toString('hex');\n}\n\nfunction newSpanId() {\n  return crypto.randomBytes(8).toString('hex');\n}\n\nexport {\n  EventMessage,\n  EventType,\n  EventAction,\n  LogEventTypeAction,\n  AuditEventTypeAction,\n  TraceEventTypeAction,\n  ErrorEventTypeAction,\n  LogEventAction,\n  AuditEventAction,\n  TraceEventAction,\n  ErrorEventAction,\n  NullEventAction,\n  EventStatusType,\n  IMessageMetadata,\n  EventMetadata,\n  EventStateMetadata,\n  EventTraceMetadata,\n  LogResponseStatus,\n  LogResponse,\n  IEventMessage,\n  IEventMetadata,\n  IEventTrace,\n  ITypeAction\n}\n"]}