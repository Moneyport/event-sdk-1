{"version":3,"file":"JsonToStructMapper.js","sourceRoot":"","sources":["../../src/transport/JsonToStructMapper.ts"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AAEZ,SAAS,mBAAmB,CAAC,IAAS;IACpC,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;IACzC,IAAI,MAAM,GAAQ,EAAE,CAAC;IACrB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAU,GAAG;QACrC,IAAI,QAAQ,GAAQ,EAAE,CAAC;QACvB,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;QACtB,IAAI,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtC,QAAQ,UAAU,EAAE;YAClB,KAAK,eAAe,CAAC;YACrB,KAAK,oBAAoB;gBACvB,QAAQ,CAAC,SAAS,GAAG,CAAC,CAAC;gBACvB,MAAM;YACR,KAAK,iBAAiB;gBACpB,QAAQ,CAAC,WAAW,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBAClD,MAAM;YACR,KAAK,gBAAgB;gBACnB,IAAI,KAAK,GAAQ,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBAC5C,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG;oBAC/C,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;gBACpB,CAAC,CAAC,CAAC;gBACH,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC;gBAC5B,MAAM;YACR,KAAK,iBAAiB;gBACpB,QAAQ,CAAC,WAAW,GAAG,KAAK,CAAC;gBAC7B,MAAM;YACR,KAAK,kBAAkB;gBACrB,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;gBAC3B,MAAM;YACR,KAAK,iBAAiB;gBACpB,QAAQ,CAAC,WAAW,GAAG,KAAK,CAAC;gBAC7B,MAAM;YACR,KAAK,eAAe;gBAClB,QAAQ,CAAC,WAAW,GAAG,KAAK,CAAC;gBAC7B,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,UAAU,CAAC,CAAC;SACtD;QACD,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,OAAO;QACL,MAAM,EAAE,MAAM;KACf,CAAC;AACJ,CAAC;AA0BC,kDAAmB;AAvBrB,SAAS,cAAc,CAAE,GAAQ;IAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAA;IACnB,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,CAAA;IACrB,IAAI,IAAI,KAAK,WAAW,EAAE,EAAE,mBAAmB;QAC7C,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,KAAU;YAC1C,OAAO,cAAc,CAAC,KAAK,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAA;KACH;SAAM,IAAI,IAAI,KAAK,aAAa,EAAE;QACjC,OAAO,mBAAmB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;KACzC;SAAM;QACL,OAAO,KAAK,CAAA;KACb;AACH,CAAC;AAED,SAAS,mBAAmB,CAAE,MAAW;IACvC,IAAI,MAAM,GAAS,EAAE,CAAA;IACrB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,GAAG;QACvC,MAAM,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;IAC3C,CAAC,CAAC,CAAA;IACF,OAAO,MAAM,CAAA;AACf,CAAC;AAIC,kDAAmB","sourcesContent":["'use strict'\n\nfunction convertJSONtoStruct(data: any) {\n  var toString = Object.prototype.toString;\n  var result: any = {};\n  Object.keys(data).forEach(function (key) {\n    var valueRep: any = {};\n    var value = data[key];\n    var typeString = toString.call(value);\n    switch (typeString) {\n      case '[object Null]':\n      case '[object Undefined]':\n        valueRep.nullValue = 0;\n        break;\n      case '[object Object]':\n        valueRep.structValue = convertJSONtoStruct(value);\n        break;\n      case '[object Array]':\n        var typed: any = convertJSONtoStruct(value);\n        var values = Object.keys(typed).map(function (key) {\n          return typed[key];\n        });\n        valueRep.listValue = values;\n        break;\n      case '[object Number]':\n        valueRep.numberValue = value;\n        break;\n      case '[object Boolean]':\n        valueRep.boolValue = value;\n        break;\n      case '[object String]':\n        valueRep.stringValue = value;\n        break;\n      case '[object Date]':\n        valueRep.stringValue = value;\n        break;\n      default:\n        throw new Error('Unsupported type: ' + typeString);\n    }\n    result[key] = valueRep;\n  });\n  return {\n    fields: result\n  };\n}\n\n\nfunction protoValueToJs (val: any) {\n  var kind = val.kind\n  var value = val[kind]\n  if (kind === 'listValue') { // FIXME check this\n    return value.values.map(function (value: any) {\n      return protoValueToJs(value)\n    })\n  } else if (kind === 'structValue') {\n    return convertStructToJson(value.fields)\n  } else {\n    return value\n  }\n}\n\nfunction convertStructToJson (struct: any) {\n  var result : any = {}\n  Object.keys(struct).forEach(function (key) {\n    result[key] = protoValueToJs(struct[key])\n  })\n  return result\n}\n\nexport {\n  convertJSONtoStruct,\n  convertStructToJson\n}"]}